{"ast":null,"code":"import { MeetingUnit, availableMeetups } from './model'; //adding an event\n\nexport function addEvent(title, description, location, date, imageURL) {\n  // validate all input\n  assert(title.length > 0, \"Title is required\");\n  assert(description.length > 0, \"Description is required\");\n  assert(location.length > 0, \"Location is required\");\n  assert(date.length > 0, \"Date is required\");\n  assert(imageURL.length > 0, \"Image Url is required\");\n  const newEvent = new MeetingUnit(title, description, location, date, imageURL, availableMeetups.length);\n  availableMeetups.push(newEvent);\n} //reading a specific event detail\n\nexport function getEvent(id) {\n  // validate id input\n  assert(id < availableMeetups.length, \"Invalid input, id not exists\");\n  return availableMeetups[i32(id)]; //fetching an existing meetup id from the existing collection\n} //reading all available meetups\n\nexport function getEvents() {\n  const result = new Array(availableMeetups.length);\n\n  for (let i = 0; i < availableMeetups.length; i++) {\n    result[i] = availableMeetups[i];\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/nyambura00/Desktop/blockchain devt/NEAR-meetups/assembly/index.ts"],"names":["MeetingUnit","availableMeetups","addEvent","title","description","location","date","imageURL","assert","length","newEvent","push","getEvent","id","i32","getEvents","result","Array","i"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,SAA9C,C,CAEA;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAgCC,WAAhC,EAAoDC,QAApD,EAAqEC,IAArE,EAAkFC,QAAlF,EAAwG;AAC3G;AACAC,EAAAA,MAAM,CAACL,KAAK,CAACM,MAAN,GAAe,CAAhB,EAAmB,mBAAnB,CAAN;AACAD,EAAAA,MAAM,CAACJ,WAAW,CAACK,MAAZ,GAAqB,CAAtB,EAAyB,yBAAzB,CAAN;AACAD,EAAAA,MAAM,CAACH,QAAQ,CAACI,MAAT,GAAkB,CAAnB,EAAsB,sBAAtB,CAAN;AACAD,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAL,GAAc,CAAf,EAAkB,kBAAlB,CAAN;AACAD,EAAAA,MAAM,CAACD,QAAQ,CAACE,MAAT,GAAkB,CAAnB,EAAsB,uBAAtB,CAAN;AAEA,QAAMC,QAAQ,GAAG,IAAIV,WAAJ,CAAgBG,KAAhB,EAAuBC,WAAvB,EAAoCC,QAApC,EAA8CC,IAA9C,EAAoDC,QAApD,EAA8DN,gBAAgB,CAACQ,MAA/E,CAAjB;AACAR,EAAAA,gBAAgB,CAACU,IAAjB,CAAsBD,QAAtB;AACH,C,CAED;;AACA,OAAO,SAASE,QAAT,CAAkBC,EAAlB,EAAuC;AAC1C;AACAL,EAAAA,MAAM,CAACK,EAAE,GAAGZ,gBAAgB,CAACQ,MAAvB,EAA+B,8BAA/B,CAAN;AAEA,SAAOR,gBAAgB,CAACa,GAAG,CAACD,EAAD,CAAJ,CAAvB,CAJ0C,CAIP;AACtC,C,CAED;;AACA,OAAO,SAASE,SAAT,GAAmC;AACtC,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAuBhB,gBAAgB,CAACQ,MAAxC,CAAf;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,gBAAgB,CAACQ,MAArC,EAA6CS,CAAC,EAA9C,EAAkD;AAC9CF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAYjB,gBAAgB,CAACiB,CAAD,CAA5B;AACD;;AACH,SAAOF,MAAP;AACH","sourcesContent":["import { MeetingUnit, availableMeetups } from './model';\n\n//adding an event\nexport function addEvent(title:string, description:string, location:string, date:string, imageURL:string): void{\n    // validate all input\n    assert(title.length > 0, \"Title is required\");\n    assert(description.length > 0, \"Description is required\");\n    assert(location.length > 0, \"Location is required\");\n    assert(date.length > 0, \"Date is required\");\n    assert(imageURL.length > 0, \"Image Url is required\");\n\n    const newEvent = new MeetingUnit(title, description, location, date, imageURL, availableMeetups.length);\n    availableMeetups.push(newEvent);\n}\n\n//reading a specific event detail\nexport function getEvent(id: i32): MeetingUnit{\n    // validate id input\n    assert(id < availableMeetups.length, \"Invalid input, id not exists\");\n\n    return availableMeetups[i32(id)];  //fetching an existing meetup id from the existing collection\n}\n\n//reading all available meetups\nexport function getEvents(): MeetingUnit[]{\n    const result = new Array<MeetingUnit>(availableMeetups.length);\n    for (let i = 0; i < availableMeetups.length; i++) {\n        result[i] = availableMeetups[i];\n      }\n    return result;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}