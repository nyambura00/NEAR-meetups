{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nyambura00/Desktop/blockchain devt/NEAR-meetups/components/AppContext.tsx\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport { login, logout, initializeContract, accountBalance } from \"../utils/near\";\nimport environment from '../utils/config';\nconst AppContext = /*#__PURE__*/createContext(null);\nexport const AppProvider = props => {\n  const {\n    0: account,\n    1: setAccount\n  } = useState({\n    accountId: undefined\n  });\n  const {\n    0: networkId,\n    1: setNetworkId\n  } = useState(`testnet`);\n  const {\n    0: config,\n    1: setConfig\n  } = useState();\n  const {\n    0: balance,\n    1: setBalance\n  } = useState({\n    tokenBalance: 0,\n    nearBalance: 0\n  });\n  useEffect(() => {\n    async function fetch() {\n      await initializeContract(); // @ts-ignore\n\n      const acc = window.walletConnection.account();\n      setAccount(acc);\n    }\n\n    fetch();\n  }, []);\n  useEffect(() => {\n    async function fetch() {\n      // @ts-ignore\n      if (account.connection) {\n        // @ts-ignore\n        setNetworkId(account.connection.networkId); // @ts-ignore\n\n        setConfig(environment(networkId));\n\n        if (account.accountId) {\n          const near = await accountBalance(); // @ts-ignore\n\n          setBalance({\n            nearBalance: near\n          });\n        }\n      }\n    }\n\n    fetch();\n  }, [account]);\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    _jsxDEV(AppContext.Provider, {\n      value: {\n        account,\n        config,\n        balance,\n        login,\n        logout\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n};\nexport default AppContext;","map":{"version":3,"sources":["/home/nyambura00/Desktop/blockchain devt/NEAR-meetups/components/AppContext.tsx"],"names":["React","useState","createContext","useEffect","login","logout","initializeContract","accountBalance","environment","AppContext","AppProvider","props","account","setAccount","accountId","undefined","networkId","setNetworkId","config","setConfig","balance","setBalance","tokenBalance","nearBalance","fetch","acc","window","walletConnection","connection","near","children"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,kBAAxB,EAA4CC,cAA5C,QAAkE,eAAlE;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAGA,MAAMC,UAAU,gBAAGP,aAAa,CAAC,IAAD,CAAhC;AAGA,OAAO,MAAMQ,WAAW,GAAIC,KAAD,IAAgB;AACzC,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC;AAAEa,IAAAA,SAAS,EAAEC;AAAb,GAAD,CAAtC;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAE,SAAF,CAA1C;AACA,QAAM;AAAA,OAACiB,MAAD;AAAA,OAASC;AAAT,MAAsBlB,QAAQ,EAApC;AACA,QAAM;AAAA,OAACmB,OAAD;AAAA,OAAUC;AAAV,MAAwBpB,QAAQ,CAAC;AAAEqB,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAD,CAAtC;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeqB,KAAf,GAAuB;AACrB,YAAMlB,kBAAkB,EAAxB,CADqB,CAErB;;AACA,YAAMmB,GAAG,GAAGC,MAAM,CAACC,gBAAP,CAAwBf,OAAxB,EAAZ;AACAC,MAAAA,UAAU,CAACY,GAAD,CAAV;AACD;;AACDD,IAAAA,KAAK;AACN,GARQ,EAQN,EARM,CAAT;AAUArB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeqB,KAAf,GAAuB;AACrB;AACA,UAAIZ,OAAO,CAACgB,UAAZ,EAAwB;AACtB;AACAX,QAAAA,YAAY,CAACL,OAAO,CAACgB,UAAR,CAAmBZ,SAApB,CAAZ,CAFsB,CAGtB;;AACAG,QAAAA,SAAS,CAACX,WAAW,CAACQ,SAAD,CAAZ,CAAT;;AACA,YAAIJ,OAAO,CAACE,SAAZ,EAAuB;AACrB,gBAAMe,IAAI,GAAG,MAAMtB,cAAc,EAAjC,CADqB,CAErB;;AACAc,UAAAA,UAAU,CAAC;AAAEE,YAAAA,WAAW,EAAEM;AAAf,WAAD,CAAV;AACD;AACF;AACF;;AACDL,IAAAA,KAAK;AACN,GAhBQ,EAgBN,CAACZ,OAAD,CAhBM,CAAT;AAkBA;AAAA;AACE;AACA,YAAC,UAAD,CAAY,QAAZ;AACE,MAAA,KAAK,EAAE;AACLA,QAAAA,OADK;AAELM,QAAAA,MAFK;AAGLE,QAAAA,OAHK;AAILhB,QAAAA,KAJK;AAKLC,QAAAA;AALK,OADT;AAAA,gBASGM,KAAK,CAACmB;AATT;AAAA;AAAA;AAAA;AAAA;AAFF;AAcD,CAhDM;AAkDP,eAAerB,UAAf","sourcesContent":["\nimport React, { useState, createContext, useEffect } from 'react';\nimport { login, logout, initializeContract, accountBalance } from \"../utils/near\";\nimport environment from '../utils/config';\n\n\nconst AppContext = createContext(null);\n\n\nexport const AppProvider = (props: any) => {\n  const [account, setAccount] = useState({ accountId: undefined });\n  const [networkId, setNetworkId] = useState(`testnet`);\n  const [config, setConfig] = useState();\n  const [balance, setBalance] = useState({ tokenBalance: 0, nearBalance: 0 });\n\n  useEffect(() => {\n    async function fetch() {\n      await initializeContract();\n      // @ts-ignore\n      const acc = window.walletConnection.account();\n      setAccount(acc);\n    }\n    fetch();\n  }, []);\n\n  useEffect(() => {\n    async function fetch() {\n      // @ts-ignore\n      if (account.connection) {\n        // @ts-ignore\n        setNetworkId(account.connection.networkId);\n        // @ts-ignore\n        setConfig(environment(networkId));\n        if (account.accountId) {\n          const near = await accountBalance();\n          // @ts-ignore\n          setBalance({ nearBalance: near });\n        }\n      }\n    }\n    fetch();\n  }, [account]);\n\n  return (\n    // @ts-ignore\n    <AppContext.Provider\n      value={{\n        account,\n        config,\n        balance,\n        login,\n        logout,\n      }}\n    >\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n"]},"metadata":{},"sourceType":"module"}